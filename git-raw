#!/usr/bin/env python3

import sys
import os
import os.path
import io
import stat
import hashlib
import subprocess
from subprocess import check_output, CalledProcessError
import re
import shutil
import time

gitraw_usage = """\
usage: git raw <command> [<args>]

git-raw is a plug-in for git that simplifies the process of storing and
managing large and/or binary files that need to be kept in sync with a
source code repository.
"""

# Each git-raw command is stored in a dictionary 'commands' with its
# name, as used on the command line, as the key. A '@command' decorator
# is used to streamline the insertion of each command into 'commands'.
#
# The 'main()' function will simply parse the command line and pass
# arguments to the available commands, while catching any resulting
# exceptions.
commands = {}

def command(func):
    """Function decorator for git-raw commands

    adds each decorated function to the global 'commands' dictionary
    using the function's name, with "_" replaced with "-" as key.

    Args:
        func: A python function that implements a git-raw command

    Returns:
        func unaltered
    """

    commands[func.__name__.replace("_", "-")] = func
    return func


# Exception classes
class GitRawError(Exception):
    def __init__(self, msg=""):
        self.msg = msg

    def __str__(self):
        return self.msg

class ImpossibleError(GitRawError):
    def __init__(self):
        super().__init__("Unexpected failure")

class NotInRepoError(GitRawError):
    def __init__(self):
        super().__init__("not in a git repository")

class UnknownCommandError(GitRawError):
    def __init__(self, cmd):
        super().__init__("'" + cmd + "' is not a git-raw command")

class NotRawInitializedError(GitRawError):
    def __init__(self):
        super().__init__("repository is not raw-initialized\n" + "try 'git raw init'")


# utility functions
def perr(*args, **kwargs):
    """Print to sys.stderr

    Forwards the call to builtin print() function but sets the output
    stream to sys.stderr.
    """

    print(*args, file=sys.stderr, **kwargs)

def vprint(*args, **kwargs):
    """Print message if in verbose mode

    Forward call to builtin print() function if the environment variable
    GIT_RAW_VERBOSE is set.
    """

    if os.environ.get("GIT_RAW_VERBOSE") != None:
        print(*args, **kwargs)

def compute_sha1(filename):
    """Compute SHA1 hash for a file's content

    Args:
        filename: A string containing path to a file

    Returns:
        A string representation of the file's SHA1 sum in hexadecimal
    """

    hashfun = hashlib.sha1()
    with open(file=filename, mode='rb') as f:
        chunk = f.read(io.DEFAULT_BUFFER_SIZE)
        while (len(chunk) > 0):
            hashfun.update(chunk)
            chunk = f.read(io.DEFAULT_BUFFER_SIZE)
    return hashfun.hexdigest()

def store_mkname(store_path, sha1sum):
    """Create a store filename based on a SHA1 hash

    Args:
        store_path: A string containing a path to a content store
        sha1sum: A string containing a SHA1 hash

    Returns:

        A pair of strings containing a path (first item) and basename
        (second item) that can be used to store or find a file with SHA1
        hash value 'sha1sum' in a content store. Joining the two items
        with os.path.join() gives the full path of the file in the
        store.
    """

    return (os.path.join(store_path, sha1sum[0:2], sha1sum), "raw")

def chmod_readonly(path):
    """Unset all write permissions on 'path'

    Unset write permissions of user, group and other for the given
    path. This is a no-op if the write permissions are already unset.

    Args:
        path: A string containing a path

    Returns:
        None

    """

    mode = os.stat(path)[stat.ST_MODE]
    new_mode = mode & ~(stat.S_IWUSR | stat.S_IWGRP | stat.S_IWOTH)
    if mode != new_mode:
        os.chmod(path, new_mode)


# Git class to hold repository and environment states plus some useful functions
class Git:
    """Git repository and git-raw state information

    An instance of Repo provides variables and methods to access and modify
    the state of the git repository in the current directory.

    Attributes:
        top_dir: A string containing the absolute path to the top-level git
            working directory
        git_dir: A string containing the path to the .git directory
        gitraw_dir: A string containing the path inside the .git
            directory containing all git-raw-associated files. Exists
            only for already git-raw-initialized repositories.
        stores_dir: path to the local content store inside
            'gitraw_dir'. Exists only for already git-raw-initialized
            repositories.
        dummy_header: A string that is written to all dummy files with
            the 'unlock' command
    """

    def __init__(self):
        """Check that we are inside a git repository and init a Git instance

        Raises:
            NotInRepoError: The current directory is not a git repository
        """

        try:
            output = check_output(["git", "rev-parse", "--is-inside-work-tree"]).rstrip(b"\n")
        except:
            raise NotInRepoError
        else:
            if output != b"true":
                raise NotInRepoError

        # save the git top directory
        try:
            self.top_dir = check_output(["git", "rev-parse", "--show-toplevel"],
                                        universal_newlines=True).rstrip("\n")
        except CalledProcessError as err:
            raise ImpossibleError

        # save the .git directory
        try:
            self.git_dir = check_output(["git", "rev-parse", "--git-dir"],
                                        universal_newlines=True).rstrip("\n")
        except CalledProcessError as err:
            raise ImpossibleError

        # various git-raw directories and paths
        self.gitraw_dir = os.path.join(self.git_dir, "git-raw")
        self.stores_dir = os.path.join(self.gitraw_dir, "store")

        self.dummy_header = "$git raw dummy$"

    def is_initialized(self):
        """Check if repository is git-raw-initialized

        Returns:
            True if the current git repository is git-raw-initialized,
            False otherwise.
        """

        if not os.path.isdir(self.gitraw_dir):
            return False

        return True

    def get_config(self, varname):
        """Get value of a git config variable by calling "git config --get"

        Args:
            varname: A string containing the name of a config variable

        Returns:
            None if the variable is not set, otherwise the string
            returned by a call to "git config --get <varname>"
        """

        try:
            output = check_output(["git", "config", "--get", varname],
                                  universal_newlines=True,
                                  stderr=subprocess.STDOUT)
        except CalledProcessError as err:
            if err.returncode == 1 and err.output == "":
                return None
            elif err.returncode != 0:
                raise ImpossibleError

        return output.rstrip("\n")

    def path_is_in_repo(self, path):
        """Check if a path is inside the current git repository

        Args:
            path: A string containing a path

        Returns:
            True if 'path' points to location inside the current git
            repository, False otherwise.
        """

        real_path = os.path.realpath(path)
        git_real_path = os.path.realpath(self.top_dir)
        rel_path = os.path.relpath(real_path, git_real_path)
        if rel_path.startswith(os.pardir):
            return False
        else:
            return True

    def path_is_raw_link(self, path):
        """Check if a path is a symbolic link to a content store

        Args:
            path: A string containing a path

        Returns:
            True if the path is a symbolic link inside the current
            repository that points to a valid (but possibly
            non-existant) raw path under 'self.stores_dir' via a
            relative path, and False otherwise. False is also returned
            if path points to an existing directory.
        """

        dirname = os.path.dirname

        if not os.path.lexists(path) or not os.path.islink(path) or os.path.isdir(path):
            return False

        if not self.path_is_in_repo(path):
            return False

        target = os.readlink(path)

        if (os.path.isabs(target)):
            return False

        # check if the target of the link ends with something like
        # "/ab/abcdef1234.../raw"
        match = re.search(os.sep + "([0-9a-f]{2})" + os.sep + "\\1[0-9a-f]{38}" + os.sep + "raw$", target)
        if (match == None):
            return False

        # remove from target the last part (that we already know
        # exists). This is important, because we don't want to return
        # False if the actual raw file is missing from the content store.
        target = dirname(dirname(dirname(target)))
        target_augmented = os.path.join(dirname(path), target)
        while (len(target) > 0):
            if os.path.isdir(target_augmented) and os.path.samefile(target_augmented, self.stores_dir):
                return True

            target = dirname(target)
            target_augmented = os.path.join(dirname(path), target)

        return False

    def path_is_raw_dummy(self, path):
        """check if a path is a dummy file generated by the 'unlock' command

        Args:
            path: A string containing a path

        Returns:
            True if the path is a regular file containing the signature
            of a git raw dummy file, and False otherwise.
        """

        if os.path.islink(path) or not os.path.isfile(path):
            return False

        with open(path, "r") as f:
            line1 = f.readline(20)
            if line1 != self.dummy_header + "\n":
                return False

            line2 = f.readline(1000)
            if " --> " not in line2:
                return False

        return True


# git-raw commands
#
# Each git-raw command is implemented by a single function. Each such
# function takes two arguments: An instance 'git' of class 'Git' and a
# list 'args' of command-line arguments.
@command
def init(git, args):
    """Initialize git repository for use by git-raw"""

    usage = "usage: git raw init"

    if len(args) > 0:
        print("error: unknown option", file=sys.stderr)
        print(usage, file=sys.stderr)
        return 1

    if git.is_initialized():
        print("Git repository is already raw-initialized", file=sys.stderr)
        return 0

    # create directory structure under $GITDIR/git-raw
    dirs =  [git.gitraw_dir, git.stores_dir]
    for path in dirs:
        os.makedirs(path, exist_ok=True)

    return 0

@command
def add(git, args):
    """Add file to a content store and replace with a soft link"""

    usage = "usage: git raw add <file>..."

    if not git.is_initialized():
        raise NotRawInitializedError()

    if len(args) == 0:
        perr("error: no files specified")
        perr(usage)
        return 1

    paths = args
    store_dir = git.stores_dir

    # check specified paths
    for path in paths:
        if os.path.islink(path):
            perr("error: '" + path + "' is a soft link")
            return 1

        if not os.path.lexists(path):
            perr("error: path '" + path + "' not found")
            return 1

        if os.path.isdir(path):
            perr("error: '" + path + "' is a directory")
            perr("recursively adding files in directories is not supported")
            perr("add each file separately")
            return 1

        if not git.path_is_in_repo(path):
            perr("error: '" + path + "' is outside repository")
            return 1

        if git.path_is_raw_dummy(path):
            perr("error: '" + path + "' is a placeholder for a git-raw file")
            perr("use 'git checkout to revert the file to a git-raw link")
            return 1

    for path in paths:
        path_sha1 = compute_sha1(path)
        path_real = os.path.realpath(path)
        path_dir_name, path_base_name = store_mkname(store_dir, path_sha1)
        path_full_name = os.path.join(path_dir_name, path_base_name)
        log_full_name = os.path.join(path_dir_name, "log")
        path_rel_name = os.path.relpath(path_full_name, os.path.dirname(os.path.realpath(path)))
        path_size = os.path.getsize(path)

        try:
            os.makedirs(path_dir_name, exist_ok=True)
        except OSError as err:
            perr("error: could not create store directory '" + path_dir_name + "'")
            perr(err.strerror)
            return 1

        if os.path.isfile(path_full_name):
            if os.path.getsize(path_full_name) != path_size:
                # This is a serious error and should never happen.  Either
                # we have a sha1 collision (extremely unlikely) or the file
                # already in the store is corrupt.
                perr("fatal error: content of '" + path + "' already exists in content store as:")
                perr("    " + path_full_name)
                perr("but their sizes do not match")
                perr("the content in the store may be corrupt!")
                return 2

            # the content of the file is already in the store
            try:
                os.remove(path)
            except OSError as err:
                perr("error: could not remove '" + path + "'")
                perr(err.strerror)
                return 1
        else:
            # the content must be moved to the store
            try:
                os.rename(path, path_full_name)
            except OSError as err:
                perr("error: could not move '" + path + "' to store")
                perr(err.strerror)
                return 1

        # write to log file
        with open(log_full_name, "a") as logfile:
            logfile.write(time.strftime("%Y-%m-%d %H:%M:%S" + "\t"))
            logfile.write("add" + "\t")
            logfile.write(os.path.basename(git.top_dir) + "\t")
            logfile.write(os.path.relpath(path_real, git.top_dir) + "\n")

        try:
            os.symlink(path_rel_name, path)
        except OSError as err:
            perr("error: could not create soft link for '" + path + "' to")
            perr("  '" + path_full_name + "'")
            return 1

        try:
            chmod_readonly(path_full_name)
        except OSError as err:
            perr("warning: could not remove write permissions on '" + path_dir_name + "'")
            perr(err.strerror)

        # at this point everything worked for path and it has been
        # turned into a soft link. Now stage this file.
        return subprocess.call(["git", "add", path])

@command
def revert(git, args):
    """replace symbolic link with a copy of its content from a content store"""

    usage = "git raw revert <file>..."

    if not git.is_initialized():
        raise NotRawInitializedError()

    if len(args) == 0:
        perr("error: no files specified")
        perr(usage)
        return 1

    paths = args

    # check that every path is a link to a store
    for path in paths:
        if not git.path_is_raw_link(path):
            perr("error: '" + path + "' is not a raw file")
            return 1

        if not os.path.exists(path):
            perr("error: cannot revert '" + path + "'")
            perr("'" + os.readlink(path) + "' does not exist")
            return 1

    for path in paths:
        target = os.path.realpath(os.path.join(os.path.dirname(path), os.readlink(path)))

        if not os.path.exists(path):
            perr("error: '" + target + "' does not exist")
            return 1

        os.remove(path)
        shutil.copy2(target, path)
        mode = os.stat(path)[stat.ST_MODE]
        os.chmod(path, mode | stat.S_IWUSR)

@command
def unlock(git, args):
    """replace symbolic link with a dummy ordinary file"""

    usage = "git raw unlock <file>..."

    if not git.is_initialized():
        raise NotRawInitializedError()

    if len(args) == 0:
        perr("error: no files specified")
        perr(usage)
        return 1

    paths = args

    for path in paths:
        if not git.path_is_raw_link(path):
            perr("error: '" + path + "' is not a raw file")
            return 1

    for path in paths:
        git_path = os.sep + os.path.relpath(path, git.top_dir)
        link_target = os.readlink(path)

        os.remove(path)
        with open(path, "w") as dummy_file:
            dummy_file.write(git.dummy_header + "\n")
            dummy_file.write(git_path + " --> " + link_target + "\n")

    return 0

@command
def ls(git, args):
    """list symbolic links to content stores"""

    usage = "git raw ls [<file>...]"

    if not git.is_initialized():
        raise NotRawInitializedError()

    paths = args

    for path in paths:
        if not os.path.lexists(path):
            perr("error: '" + path + "' does not exist")
            return 1

    # get all links in the index
    try:
        output = check_output(["git", "ls-files", "--cached", "--stage", "-z"] + paths,
                              universal_newlines=True)
    except CalledProcessError as err:
        if not err.output.endswith("is outside repository\n"):
            raise ImpossibleError

        perr(err.output)
        return 1
    links = [p.split(maxsplit=3)[-1] for p in output.split("\0") if p[0:2] == "12"]

    # get files not in the index
    try:
        output = check_output(["git", "ls-files", "--others", "-z"],
                              universal_newlines=True)
    except CalledProcessError as err:
        raise ImpossibleError
    others = output.split("\0")

    # get all deleted files
    try:
        output = check_output(["git", "ls-files", "--deleted", "-z"],
                              universal_newlines=True)
    except CalledProcessError as err:
        raise ImpossibleError
    deleted = output.split("\0")

    raw_links = [p for p in links + others if p not in deleted and git.path_is_raw_link(p)]

    for rl in raw_links:
        print(rl)

    return 0


@command
def check(git, args):
    """A dummy command used during development/debugging"""

    return 0


# add command names to usage string
commands_usages_short = ["    " + name + " "*(8 - len(name)) + f.__doc__.split('\n', 1)[0] for (name, f) in commands.items()]
commands_usages_short.sort()
gitraw_usage = gitraw_usage + "\n\nAvailable commands: \n" + "\n".join(commands_usages_short)

def main():
    if len(sys.argv) <= 1:
        perr(gitraw_usage)
        return 1

    try:
        if sys.argv[1] not in commands:
            raise UnknownCommandError(sys.argv[1])

        git = Git()
        return commands[sys.argv[1]](git, sys.argv[2:])
    except GitRawError as err:
        perr("git-raw:", err)
        return 1

    return 0


if __name__ == "__main__":
    sys.exit(main())
